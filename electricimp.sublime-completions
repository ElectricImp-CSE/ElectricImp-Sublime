{
    "scope": "source.nut",
    "completions": [
        
        "agent",
            { "trigger": "agent.on\t(messageName, callback)", "contents": "agent.on(${1:messageName}, ${0:callback})" },
            { "trigger": "agent.send\t(messageName, data)", "contents": "agent.send(${1:messageName}, ${0:data})" },
        "device",
            { "trigger": "device.isconnected\t()", "contents": "device.isconnected()" },
            { "trigger": "device.on\t(messageName, callback)", "contents": "device.on(${1:messageName}, ${0:callback})" },
            { "trigger": "device.onconnected\t(callback)", "contents": "device.onconnected(${0:callback})" },
            { "trigger": "device.ondisconnected\t(callback)", "contents": "device.ondisconnected(${0:callback})" },
            { "trigger": "device.send\t(messageName, data)", "contents": "device.send(${1:messageName}, ${0:data})" },
        "hardware",
            { "trigger": "hardware.getdeviceid\t()", "contents": "hardware.getdeviceid()" },
            { "trigger": "hardware.lightlevel\t()", "contents": "hardware.lightlevel()" },
            { "trigger": "hardware.micros\t()", "contents": "hardware.micros()" },
            { "trigger": "hardware.millis\t()", "contents": "hardware.millis()" },
            { "trigger": "hardware.vbat\t()", "contents": "hardware.vbat()" },
            { "trigger": "hardware.voltage\t()", "contents": "hardware.voltage()" },
            { "trigger": "hardware.wakereasons\t()", "contents": "hardware.wakereason()" },
        "http",
            { "trigger": "http.agenturl\t()", "contents": "http.agenturl()" },
            { "trigger": "http.base64decode\t(string)", "contents": "http.base64decode(${0:string})" },
            { "trigger": "http.base64encode\t(object)", "contents": "http.base64encode({$0:object})" },
            { "trigger": "http.get\t(url, headers)", "contents": "http.get(${1:url}, ${0:headers})" },
            { "trigger": "http.httpdelete\t(url, headers)", "contents": "http.httpdelete(${1:url}, ${0:headers})" },
            { "trigger": "http.jsondecode\t(string)", "contents": "http.jsondecode(${0:string})" },
            { "trigger": "http.jsonencode\t(object)", "contents": "http.jsonencode(${0:object})" },
            { "trigger": "http.onrequest\t(requestHandler)", "contents": "http.onrequest(${0:callback})" },
            { "trigger": "http.post\t(url, headers, body)", "contents": "http.post(${2:url}, ${1:headers}, ${0:body})" },
            { "trigger": "http.put\t(url, headers, body)", "contents": "http.put(${2:url}, ${1:headers}, ${0:body})" },
            { "trigger": "http.request\t(verb, url, headers, body)", "contents": "http.request(${3:verb}, ${2:url}, ${1:headers}, ${0:body})" },
            { "trigger": "http.urldecode\t(object)", "contents": "http.urldecode(${0:object})" },
            { "trigger": "http.urlencode\t(string)", "contents": "http.urlencode(${0:string})" },
        "http.hash",
            { "trigger": "http.hash.hmacsha1\t(data, key)", "contents": "http.hash.hmacsha1(${1:data}, ${0:key})" },
            { "trigger": "http.hash.hmacsha256\t(data, key)", "contents": "http.hash.hmacsha256${1:data}, ${0:key})" },
            { "trigger": "http.hash.hmacsha512\t(data, key)", "contents": "http.hash.hmacsha512(${1:data}, ${0:key})" },
            { "trigger": "http.hash.md5\t(data)", "contents": "http.hash.md5(${0:data})" },
            { "trigger": "http.hash.sha1\t(data)", "contents": "http.hash.sha1(${0:data})" },
            { "trigger": "http.hash.sha256\t(data)", "contents": "http.hash.sha256(${0:data})" },
            { "trigger": "http.hash.sha512\t(data)", "contents": "http.hash.sha512(${0:data})" },
        "imp",
            { "trigger": "imp.cancelwakeup\t(timer)", "contents": "imp.cancelwakeup(${0:timer})" },
            { "trigger": "imp.clearconfiguration\t(action)", "contents": "imp.clearconfiguration(${0:CONFIG_WIFI|CONFIG_STATIC_NETWORK|CONFIG_PROXY|CONFIG_ALL})" },
            { "trigger": "imp.deepsleepfor\t(seconds)", "contents": "imp.deepsleepfor(${0:seconds})" },
            { "trigger": "imp.deepsleepuntil\t(seconds)", "contents": "imp.deepsleepuntil(${3:hour}, ${2:minute}, ${1:second}, ${0:day})" },
            { "trigger": "imp.enableblinkup\t(bool)", "contents": "imp.enableblinkup(${0:state})" },
            { "trigger": "imp.environment\t()", "contents": "imp.environment()" },
            { "trigger": "imp.getbootromversion\t()", "contents": "imp.getbootromversion()" },
            { "trigger": "imp.getbssid\t()", "contents": "imp.getbssid()" },
            { "trigger": "imp.getchannel\t()", "contents": "imp.getchannel()" },
            { "trigger": "imp.getcountry\t()", "contents": "imp.getcountry()" },
            { "trigger": "imp.getethernetspeed\t()", "contents": "imp.getethernetspeed()" },
            { "trigger": "imp.getmacaddress\t()", "contents": "imp.getmacaddress()" },
            { "trigger": "imp.getmemoryfree\t()", "contents": "imp.getmemoryfree()" },
            { "trigger": "imp.getpoweren\t()", "contents": "imp.getpoweren()" },
            { "trigger": "imp.getpowersave\t()", "contents": "imp.getpowersave()" },
            { "trigger": "imp.getrssi\t()", "contents": "imp.getrssi()" },
            { "trigger": "imp.getsoftwareversion\t()", "contents": "imp.getsoftwareversion()" },
            { "trigger": "imp.getssid\t()", "contents": "imp.getssid()" },
            { "trigger": "imp.onidle\t(callback)", "contents": "imp.onidle(${0:callback})" },
            { "trigger": "imp.rssi\t()", "contents": "imp.rssi()" },
            { "trigger": "imp.scanwifinetworks\t()", "contents": "imp.scanwifinetworks()" },
            { "trigger": "imp.setpoweren\t(bool)", "contents": "imp.setpoweren(${0:state})" },
            { "trigger": "imp.setcountry\t(string)", "contents": "imp.setcountry(${0:regionCode})" },
            { "trigger": "imp.setenroltokens\t(string, string)", "contents": "imp.setenroltokens(${1:planID}, ${0:token})" },
            { "trigger": "imp.setnvramimage\t(string)", "contents": "imp.setnvramimage(${0:settings})" },
            { "trigger": "imp.setpoweren\t(bool)", "contents": "imp.setpoweren(${0:state})" },
            { "trigger": "imp.setpowersave\t(bool)", "contents": "imp.setpowersave(${0:state})" },
            { "trigger": "imp.setproxy\t(proxyType, address, port, username, password)", "contents": "imp.setproxy(${4:PROXY_TYPE_HTTP}, ${3:address}, ${2:port}, ${1:username}, ${0:password})" },
            { "trigger": "imp.setsendbuffersize\t(numBytes)", "contents": "imp.setsendbuffersize(${0:numBytes})" },
            { "trigger": "imp.setwificonfiguration\t(ssid, password)", "contents": "imp.setwificonfiguration(${1:ssid}, ${0:password})" },
            { "trigger": "imp.sleep\t(seconds)", "contents": "imp.sleep(${0:seconds})" },
            { "trigger": "imp.wakeup\t(seconds, callback)", "contents": "imp.wakeup(${1:seconds}, ${0:callback})" },
        "server",
            { "trigger": "server.bless\t(bool, callback)", "contents": "server.bless(${1:testSuccess}, ${0:callback})" },
            { "trigger": "server.connect\t(callback, timeout)", "contents": "server.connect(${1:callback}, ${0:timeout})" },
            { "trigger": "server.disconnect\t()", "contents": "server.disconnect()" },
            { "trigger": "server.error\t(message)", "contents": "server.error(${0:message})" },
            { "trigger": "server.expectonlineat\t(hour, minute, second, dayOfWeek)", "contents": "server.expectonlineat(${3:hour}, ${2:minute}, ${1:second}, ${0:SUNDAY|MONDAY|TUESDAY|WEDNESDAY|THURSDAY|FRIDAY|SATURDAY})" },
            { "trigger": "server.expectonlinein\t(seconds)", "contents": "server.expectonlinein(${0:seconds})" },
            { "trigger": "server.factoryblinkup\t(SSID, password, pin, flags)", "contents": "server.factoryblinkup(${3:SSID}, ${2:password}, ${1:pinOject}, ${1:BLINKUP_FAST|BLINKUP_ACTIVEHIGH})" },
            { "trigger": "server.flush\t(timeout)", "contents": "server.flush(${0:seconds})" },
            { "trigger": "server.isconnected\t()", "contents": "server.isconnected()" },
            { "trigger": "server.onunexpecteddisconnect\t(function)", "contents": "server.onunexpecteddisconnect(${0:callback})" },
            { "trigger": "server.restart\t()", "contents": "server.restart()" },
            { "trigger": "server.save\t(table)", "contents": "server.save(${0:table})" },
            { "trigger": "server.load\t()", "contents": "server.load()" },
            { "trigger": "server.log\t(message)", "contents": "server.log(${0:message})" },
            { "trigger": "server.setsendtimeoutpolicy\t(onError, waitFor, maxTimeout)", "contents": "server.setsendtimeoutpolicy(${3:RETURN_ON_ERROR|SUSPECT_ON_ERROR},${2:WAIT_TIL_SENT|WAIT_FOR_ACK},${1:maxTimeout})" },
            { "trigger": "server.sleepfor\t(seconds)", "contents": "server.sleepfor(${0:seconds})" },
            { "trigger": "server.sleepuntil\t(hour, minute, second, dayOfWeek)", "contents": "server.sleepuntil(${3:hour}, ${2:minute}, ${1:second}, ${0:SUNDAY|MONDAY|TUESDAY|WEDNESDAY|THURSDAY|FRIDAY|SATURDAY})" }
    ]
}
